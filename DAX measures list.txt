% of All Orders = 
 DIVIDE(
    [Total Orders],
    [All Orders]
 )

% of All Returns = 
 DIVIDE(
    [Total Returns],
    [All Returns]
 )

% of Overall Retail Price = 
 DIVIDE(
    [Average Retail Price],
    [Overall Retail Price]
 )

10 days Running Revenue = 
 CALCULATE(
    [Total Revenue],
    DATESINPERIOD(
        'Calendar Lookup'[Date],
        MAX('Calendar Lookup'[Date]),
        -10,
        DAY
    )
 )	

90 Day Running Profit = 
 CALCULATE(
    [Total Profit],
    DATESINPERIOD('Calendar Lookup'[Date],
    MAX('Calendar Lookup'[Date]),
    -90,
    DAY
    )
 )

Adjusted Price = [Average Retail Price] * (1 + 'Price Adjustment (%)'[Price Adjustment (%) Value]) 

Adjusted Profit = 
 [Adjusted Revenue] - [Total Cost]

Adjusted Revenue = 
 SUMX(
    'Sales Data',
    [Adjusted Price] * 'Sales Data'[OrderQuantity]
    )	

 All Orders = 
 CALCULATE(
    [Total Orders],
    ALL(
        'Sales Data'
    )
 )

All Returns = 
 CALCULATE(
    [Total Returns],
    ALL(
        'Returns Data'
    )
 )

Average Retail Price = AVERAGE('Product Lookup'[ProductPrice]) 

Average Revenue Per Customer = 
DIVIDE(
    [Total Revenue],
    [Total Customers]
)

Bike Return Rate = 
 CALCULATE(
    [Return Rate], 
    'Product Categories Lookup'[CategoryName] = "Bikes"
 )

Bike Returns = 
CALCULATE(
    [Total Returns],
    'Product Categories Lookup'[CategoryName] = "Bikes"
)

Bike Sales = 
 CALCULATE(
    [Quantity Sold],
    'Product Categories Lookup'[CategoryName] = "Bikes"
 )

Bulk Orders = 
CALCULATE(
    [Total Orders],
    'Sales Data'[OrderQuantity] > 1
)

Full Name (Customer Detail) = 
 IF(
    HASONEVALUE(
        'Customer Lookup'[CustomerKey]),
        MAX('Customer Lookup'[Full Name (CC)]),
        "Multiple Customers")

High Ticket Orders = 
 CALCULATE(
    [Total Orders],
    FILTER(
        'Product Lookup',
        'Product Lookup'[ProductPrice] > [Overall Retail Price]
    )
)

Num Of Customers = DISTINCTCOUNT('Sales Data'[CustomerKey]) 

Order Target = 
[Previous Month Orders] * 1.1

Order Target Gap = [Total Orders] - [Order Target]

Overall Retail Price = 
CALCULATE(
    [Average Retail Price],
    ALL(
        'Sales Data'
    )
)

Previous Month Orders = 
 CALCULATE(
    [Total Orders],
    DATEADD(
        'Calendar Lookup'[Date],
        -1, 
        MONTH
    )
 )

Previous Month Profit = 
 CALCULATE(
    [Total Profit],
    DATEADD(
        'Calendar Lookup'[Date],
        -1, 
        MONTH
    )
 )

Previous Month Returns = 
CALCULATE(
    [Total Returns],
    DATEADD(
        'Calendar Lookup'[Date],
        -1,
        MONTH
    )
)	

Previous Month Revenue = 
 CALCULATE(
    [Total Revenue],
    DATEADD(
        'Calendar Lookup'[Date],
        -1,
        MONTH
    )
 )

Profit Target = 
 [Previous Month Profit] * 1.1

Profit Target Gap = [Total Profit] - [Profit Target] 

Quantity Returned = SUM('Returns Data'[ReturnQuantity])

Quantity Sold = 
 SUM(
    'Sales Data'[OrderQuantity]
 )

Return Rate = DIVIDE([Quantity Returned], [Quantity Sold])

Revenue Per Customer = 
DIVIDE(
    [Total Revenue],
    [Total Customers]
)

Revenue Sparkline = 
// Static line color - use %23 instead of # for Firefox compatibility (Measure Derived from Eldersveld Modified by Kolosko)
VAR LineColour = "%2320E2D7"
VAR PointColour = "%23333333"
VAR Defs = "<defs>
    <linearGradient id='grad' x1='0' y1='25' x2='0' y2='50' gradientUnits='userSpaceOnUse'>
        <stop stop-color='#20E2D7' offset='0' />
        <stop stop-color='#20E2D7' offset='0.3' />
        <stop stop-color='#333333' offset='1' />
    </linearGradient>
</defs>"
// "Date" field used in this example along the X axis
VAR XMinDate = MIN('Calendar Lookup'[Date])
VAR XMaxDate = MAX('Calendar Lookup'[Date])

// Obtain overall min and overall max measure values when evaluated for each date
VAR YMinValue = MINX(Values('Calendar Lookup'[Date]),CALCULATE([Total Revenue]))
VAR YMaxValue = MAXX(Values('Calendar Lookup'[Date]),CALCULATE([Total Revenue]))

// Build table of X & Y coordinates and fit to 50 x 150 viewbox
VAR SparklineTable = ADDCOLUMNS(
    SUMMARIZE('Calendar Lookup','Calendar Lookup'[Date]),
        "X",INT(150 * DIVIDE('Calendar Lookup'[Date] - XMinDate, XMaxDate - XMinDate)),
        "Y",INT(50 * DIVIDE([Total Revenue] - YMinValue,YMaxValue - YMinValue)))

// Concatenate X & Y coordinates to build the sparkline
VAR Lines = CONCATENATEX(SparklineTable,[X] & "," & 50-[Y]," ", 'Calendar Lookup'[Date])

// Last data points on the line
VAR LastSparkYValue = MAXX( FILTER(SparklineTable, 'Calendar Lookup'[Date] = XMaxDate), [Y])
VAR LastSparkXValue = MAXX( FILTER(SparklineTable, 'Calendar Lookup'[Date] = XMaxDate), [X])

// Add to SVG, and verify Data Category is set to Image URL for this measure
VAR SVGImageURL = 
    "data:image/svg+xml;utf8," & 
    --- gradient---
    "<svg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='-7 -7 164 64'>" & Defs & 
     "<polyline fill='url(#grad)' fill-opacity='0.3' stroke='transparent' 
      stroke-width='0' points=' 0 50 " & Lines & 
      " 150 150 Z '/>" &
    --- Lines---
    "<polyline 
        fill='transparent' stroke='" & LineColour & "' 
        stroke-linecap='round' stroke-linejoin='round' 
        stroke-width='3' points=' " & Lines & 
      " '/>" &
    --- Last Point---
        "<circle cx='"& LastSparkXValue & "' cy='" & 50 - LastSparkYValue & "' r='4' stroke='" & LineColour & "' stroke-width='2' fill='" & PointColour & "' />" &
        "</svg>"
RETURN SVGImageURL

Revenue Target Gap = [Total Revenue] - [Target Revenue] 

Revenue Target Gap with Arrow = 
 var uparrow = UNICHAR(129129)
 var downarrow = UNICHAR(129131)
 var revenuegap = [Revenue Target Gap]

 return
 IF(revenuegap < 0,
 FORMAT(ROUND(revenuegap, 0), "$#,###") & " "&downarrow,
 FORMAT(ROUND(revenuegap, 0), "$#,###") & " "&uparrow)

Revenue YTD = 
 CALCULATE(
    [Total Revenue],
    DATESYTD(
        'Calendar Lookup'[Date]
        )
 )

Target Revenue = 
[Previous Month Revenue] * 1.1

Total Cost = 
 SUMX(
    'Sales Data',
    RELATED('Product Lookup'[ProductCost]) * 'Sales Data'[OrderQuantity]
 )


Total Customers = DISTINCTCOUNT(
     'Sales Data'[CustomerKey]
)


Total Order (Customer Detail) = 
  IF(
    HASONEVALUE(
        'Customer Lookup'[CustomerKey]),
        [Total Orders],
        "-"
  )
  
Total Orders = DISTINCTCOUNT('Sales Data'[OrderNumber]) 

Total Profit = 
 [Total Revenue] - [Total Cost]

Total Returns = COUNT('Returns Data'[ReturnQuantity])

Total Revenue = 
 SUMX(
    'Sales Data',
    RELATED('Product Lookup'[ProductPrice]) * 'Sales Data'[OrderQuantity]
    )

Total Revenue (Customer Detail) = 
  IF(
    HASONEVALUE(
        'Customer Lookup'[CustomerKey]),
        [Total Revenue],
        "-"
  )

Weekend Orders = 
 CALCULATE(
    [Total Orders],
    'Calendar Lookup'[IsWeekend] = "Weekday"
 )

        